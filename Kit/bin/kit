#!/usr/bin/env ruby

require "fileutils"
require "pathname"

require_relative "../lib/database"
require_relative "../lib/entry"
require_relative "../lib/refs"
require_relative "../lib/workspace"
require_relative "../lib/index"

# remove and return the first item from CLI arguments
command = ARGV.shift

case command 
# if the command is init
when "init"
  # if there is anotherargument, fetch it
  # otherwise return a default (working directory)
  path = ARGV.fetch(0, Dir.getwd)

  # convert a relative path to absolute one
  # then wrap it in a Pathname object that has methods for path manipulation
  # it's better to use data type specific methods for manipulation
  # than working with strings
  root_path = Pathname.new(File.expand_path(path))
  # add /.git to the resulting path
  git_path = root_path.join(".git")

  ["objects", "refs"].each do |dir|
    begin
      # create a directory with the name
      # mkdir_p is like `mkdir -p` that creates the directory
      # alongside any parent directories needed
      FileUtils.mkdir_p(git_path.join(dir))
    # if the script doesn't have permissions, throw
    # Errno is a namespace for operating system calls
    # Ruby mimics standard C constants for them
    rescue Errno::EACCES => error
      # use the stderr stream to report the error to the user
      # puts by itself sends the output to stdout
      $stderr.puts "fatal: #{ error.message }"
      exit 1
    end
  end
  
  puts "Initialized empty Kit repository in #{ git_path }"
  exit 0

when "commit"
  # assume working directory is the repo location
  root_path = Pathname.new(Dir.getwd)
  git_path  = root_path.join(".git")
  db_path   = git_path.join("objects")
  
  # list the files in a directory with the Workspace
  # Workspace class is responsible for files in the working tree
  database  = Database.new(db_path)
  index     = Index.new(git_path.join("index"))
  refs      = Refs.new(git_path)

  index.load
  
  root = Database::Tree.build(index.each_entry)
  root.traverse { |tree| database.store(tree) }

  parent  = refs.read_head
  # get author information from ENV variables
  name    = ENV.fetch("GIT_AUTHOR_NAME")
  email   = ENV.fetch("GIT_AUTHOR_EMAIL")
  # pass author information and timestamp
  author  = Database::Author.new(name, email, Time.now)
  # read the message from stdin (pipe the command)
  message = $stdin.read

  commit = Database::Commit.new(parent, root.oid, author, message)
  database.store(commit)
  refs.update_head(commit.oid)

  is_root = parent.nil? ? "(root-commit) " : ""
  puts "[#{ is_root }#{ commit.oid }] #{ message.lines.first }"
  exit 0

when "add"
  root_path = Pathname.new(Dir.getwd)
  git_path  = root_path.join(".git")
  
  workspace = Workspace.new(root_path)
  database  = Database.new(git_path.join("objects"))
  index     = Index.new(git_path.join("index"))

  index.load_for_update

  ARGV.each do |path|
    # every element of ARGV can be a path
    path = Pathname.new(File.expand_path(path))

    # get a list of paths relative to root
    workspace.list_files(path).each do |pathname|
      data = workspace.read_file(pathname)
      stat = workspace.stat_file(pathname)
      
      blob = Database::Blob.new(data)
      database.store(blob)
      index.add(pathname, blob.oid, stat)
    end
  end

  index.write_updates 
  exit 0

# if the command is not init
else
  $stderr.puts "kit: '#{ command }' is not a kit command."
  exit 1
end